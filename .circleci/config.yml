version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
          type: string   
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws s3 rb s3://udapeople-<< parameters.workflow_id >> --force
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
          type: string     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          # Add when this will run
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/TFbubBBBgVe2hXFeyRNXtT/migration_<< parameters.workflow_id >>)
            # Logic for reverting the database state
            if (( "$SUCCESS" == "1" ));
            then
                cd ~/project/backend
                npm install
                npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front-end test
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build            
               
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run Back-end test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front-end scan
          command: |
            cd frontend
            npm install
            # npm audit fix --audit-level=critical --force
            # npm audit fix --force
            npm audit fix --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run back-end scan
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            # npm audit fix --audit-level=critical --force
            # npm audit fix --force
            npm audit fix --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags project=udapeople \
              --region us-east-1 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags project=udapeople \
              --region us-east-1 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws --region us-east-1 ec2 describe-instances \
            --filters "Name=instance-state-name,Values=running" "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].[PublicIpAddress]' \
            --output text >> ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - "inventory.txt"
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   

  configure-infrastructure:
    docker:
      - image: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["5d:f6:a8:fc:08:ac:a0:e7:af:d6:5a:47:e1:99:74:91"]
      - run:
          name: Install dependencies
          command: |
            pip install ansible
      - run:
          name: install awscli
          command: |
            pip install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Echo inventory
          command: cat ~/inventory.txt
      - run:
          name: Configure server
          command: |         
            cd .circleci/ansible 
            ansible-playbook -i ~/inventory.txt configure.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]      
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            cd backend
            if grep -q "has been executed successfully." backend/migrations_dump.txt
            then
                # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
                #curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                curl https://kvdb.io/TFbubBBBgVe2hXFeyRNXtT/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
                #echo "Run migrations successfully!"
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
    
  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout      
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install python python-pip
            pip install ansible 
            pip install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=instance-state-name,Values=running" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive     
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}              
  
  deploy-backend:
    docker:
      - image: python
    steps:
      - checkout       
      - add_ssh_keys:
          fingerprints: ["5d:f6:a8:fc:08:ac:a0:e7:af:d6:5a:47:e1:99:74:91"]
      - run:
          name: Install dependencies
          command: |
            pip install ansible
            pip install awscli
            apt update && apt install nodejs npm tar gzip -y
      - attach_workspace:
          at: ~/
      - run:
          name: Add env
          command: |
            echo "NODE_ENV=$NODE_ENV" >> backend/.env
            echo "VERSION=1" >> backend/.env
            echo "TYPEORM_CONNECTION=$TYPEORM_CONNECTION" >> backend/.env
            echo "TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR" >> backend/.env
            echo "TYPEORM_ENTITIES=$TYPEORM_ENTITIES" >> backend/.env
            echo "TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS" >> backend/.env
            echo "TYPEORM_HOST=$TYPEORM_HOST" >> backend/.env
            echo "TYPEORM_PORT=5432" >> backend/.env
            echo "TYPEORM_USERNAME=$TYPEORM_USERNAME" >> backend/.env
            echo "TYPEORM_PASSWORD=$TYPEORM_PASSWORD" >> backend/.env
            echo "TYPEORM_DATABASE=$TYPEORM_DATABASE" >> backend/.env
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            export BACKEND_IP=$(cat ~/inventory.txt)
            scp -r -o StrictHostKeyChecking=no artifact.tar.gz ubuntu@$BACKEND_IP:/home/ubuntu/
            cd .circleci/ansible
            cat ~/inventory.txt
            ansible-playbook -i ~/inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: python
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            pip install ansible
            pip install awscli
            apt update && apt install nodejs npm tar gzip -y
      - attach_workspace:
          at: ~/
      - run:
          name: Echo inventory
          command: |
            cat ~/inventory.txt
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(cat ~/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo $API_URL
            if curl "$API_URL/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo $URL
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      # - destroy-environment:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip curl
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople 

# cleanup:
#     docker:
#       Docker image here
#     steps:
#       Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               your code here
#             fi
            

workflows:
  deault:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - "build-frontend"
      - test-backend:
          requires:
            - "build-backend"
      - scan-frontend:
          requires:
            - "build-frontend"
      - scan-backend:
          requires:
            - "build-backend"
      - deploy-infrastructure:
          requires:
            - "scan-frontend"
            - "scan-backend"
            - "test-frontend"
            - "test-backend"
          filters:
            branches:
              only: 
                - main
      - configure-infrastructure:
          requires:
            - "deploy-infrastructure"
      - run-migrations:
          requires:
            - "configure-infrastructure"
      - deploy-frontend:
          requires:
            - "configure-infrastructure"
      - deploy-backend:
          requires:
            - "configure-infrastructure"
            - "run-migrations"
      - smoke-test:
          requires:
            - "deploy-frontend"
            - "deploy-backend"
      - cloudfront-update:
          requires:
            - "smoke-test"
      # - cleanup:
      #     requires: [cloudfront-update]
